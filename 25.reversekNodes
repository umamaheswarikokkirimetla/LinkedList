# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        def rll(head):
            temp=head
            prev=None
            while temp:
                front=temp.next
                temp.next=prev
                prev=temp
                temp=front
            return prev
        def findk(temp,k):
            k-=1
            while temp and k>0:
                k-=1
                temp=temp.next
            return temp
        temp=head
        pl=None
        while temp:
            kn=findk(temp,k)
            if kn is None:
                if pl:
                    pl.next=temp
                break
            nn=kn.next
            kn.next=None
            rll(temp)
            if temp==head:
                head=kn
            else:
                pl.next=kn
            pl=temp
            temp=nn
        return head


        
