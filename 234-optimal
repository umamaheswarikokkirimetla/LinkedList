# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        slow=head
        fast=head
        while fast.next is not None and fast.next.next is not None:
            fast=fast.next.next
            slow=slow.next
        def reverse1(head):
            if head is None or head.next is  None:
                return head
            newHead=reverse1(head.next)
            front=head.next
            front.next=head
            head.next=None
            return newHead
        newHead=reverse1(slow.next)

        first=head
        second=newHead
        while second is not None:
            if first.val != second.val:
                reverse1(newHead)
                return False
            first=first.next
            second=second.next
        reverse1(newHead)
        return True
            
    
        
